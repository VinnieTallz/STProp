// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Can be changed to "mysql", "sqlite", etc.
  url      = env("DATABASE_URL")
}

// Example models based on your existing types
// These can be modified once database requirements are confirmed

model Lock {
  id            String   @id @default(cuid())
  deviceId      String   @unique
  name          String
  status        String   // 'locked', 'unlocked', 'unknown'
  isOnline      Boolean  @default(false)
  batteryLevel  Int?
  location      String?
  manufacturer  String?
  model         String?
  capabilities  String[] // Array of capability strings
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  schedules     Schedule[]
  accessCodes   AccessCode[]
  auditLogs     AuditLog[]

  @@map("locks")
}

model Schedule {
  id          String   @id @default(cuid())
  name        String
  type        String   // 'lock' or 'unlock'
  startTime   String?  // HH:MM format
  endTime     String?  // HH:MM format
  daysOfWeek  Int[]    // Array of day numbers (0-6)
  isActive    Boolean  @default(true)
  deviceId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  lock        Lock?    @relation(fields: [lockId], references: [id], onDelete: Cascade)
  lockId      String?

  @@map("schedules")
}

model AccessCode {
  id        String   @id @default(cuid())
  name      String
  code      String
  type      String   @default("ongoing") // 'ongoing' or 'one-time'
  isActive  Boolean  @default(true)
  deviceId  String?
  status    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  lock      Lock?    @relation(fields: [lockId], references: [id], onDelete: Cascade)
  lockId    String?

  @@map("access_codes")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String   // 'lock', 'unlock', 'create_code', etc.
  deviceId  String?
  userId    String?  // For future user management
  details   Json?    // Flexible field for additional data
  success   Boolean
  error     String?
  timestamp DateTime @default(now())

  // Relations
  lock      Lock?    @relation(fields: [lockId], references: [id], onDelete: SetNull)
  lockId    String?

  @@map("audit_logs")
}